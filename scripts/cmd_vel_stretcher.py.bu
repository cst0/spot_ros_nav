#!/usr/bin/env python3

"""
the spot has a very high cutoff for input command velocity rates:
    if they don't come in fast enough the robot will stutter at a
    high speed. to work around that, this script will subscribe
    to the cmd_vel topic and republish it at a much higher
    rate on the /spot/cmd_vel topic.
"""

import rospy
from geometry_msgs.msg import Twist
from rospy.timer import TimerEvent

class CmdVelStretcher:
    def __init__(self):
        self.cmd_vel_sub = rospy.Subscriber('cmd_vel', Twist, self.cmd_vel_cb)
        self.cmd_vel_pub = rospy.Publisher('/spot/cmd_vel', Twist, queue_size=1)
        self.most_recent = []
        self.timer = rospy.Timer(rospy.Duration(0.1), self.timer_cb)
        self.timings = []
        self.last_time = rospy.Time.now()
        self.have_published_halt = True

    def cmd_vel_cb(self, msg:Twist):
        self.have_published_halt = False
        self.timings.append(rospy.Time.now() - self.last_time)
        if len(self.timings) > 10:
            self.timings.pop(0)
        self.last_time = rospy.Time.now()

        self.most_recent.append(msg)
        if len(self.most_recent) > 10:
            self.most_recent.pop(0)

#    def timer_cb(self, _):
#        if self.timings[-1] > rospy.Duration(0.1) and not self.have_published_halt:
#            self.cmd_vel_pub.publish(Twist()) # publish halt if it's been a while since we've seen anything
#            self.have_published_halt = True
#
#        if len(self.most_recent) > 0:
#            self.cmd_vel_pub.publish(self.get_recent_maxvel())
#
#    def get_recent_maxvel(self):
#        # find translational velocity

    def timer_cb(self, _):
        # check how many other publishers are on the cmd_vel topic via the self.cmd_vel_sub
        numconn = self.cmd_vel_sub.get_num_connections()
        if numconn > 1:
            rospy.logwarn("more than one publisher to cmd_vel topic: {}".format(numconn))

        if self.most_recent is not None:
            rospy.loginfo("tick")
            if self.last_was_halt and not self.have_published_halt:
                rospy.loginfo("last was halt and have not published halt, publishing halt")
                self.cmd_vel_pub.publish(Twist())
                self.have_published_halt = True
            else:
                rospy.loginfo("publishing not halt")
                self.cmd_vel_pub.publish(self.most_recent)

if __name__ == '__main__':
    rospy.init_node('cmd_vel_stretcher')
    c = CmdVelStretcher()
    rospy.spin()
    c.cmd_vel_pub.unregister()
    c.cmd_vel_sub.unregister()
    c.timer.shutdown()
    rospy.loginfo('cmd_vel_stretcher shutting down')
